function c = newton2(x0, steps)%% 	%% newton.m%% %% Implements Newton's method%%%% Input: 	x0	initial guess for the root of f%% 		steps    number of steps we desire%%                      (Code runs until steps = 0 )%% %% Output:	c 	the approxmiation to the root of f%% %% Syntax:	newton(x0, delta)%%format long ec = x0;    fc = f(x0);                   fprintf('initial guess:  c=%25.15e, fc=%d\n',c,fc)% to see all digits                                                  % %25.15e is used%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                       %%%% main routine                                                          %%%%                                                                       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%while steps > 0,  fpc = fprime(c);          if fpc==0,                    %% if fprime is 0, abort.    error('fprime is 0')        %% the error function prints message and exits  end;  c = c - fc/fpc;               %% Newton step  fc = f(c);  fprintf('   c=%25.15e, fc=%d\n',c,fc);   steps = steps -1 ;end;%%%% put subroutines here%%%%function fx = f(x)  %fx = sin(x);  %fx = x^2-2;  %fx = (5-x)*exp(x) - 5;         %% Enter your function here.  %fx = x^(1/3);  fx = x^3 - x^2 -2*x;	return;function fprimex = fprime(x)  %fprimex = cos(x);  %fprimex = 2*x;  %fprimex = (5-x)*exp(x) - exp(x); %% Enter the derivative                                         % of your function here.  %fprimex = 1/(3*x^(2/3));                fprimex = 3*x^2 - 2*x - 2;	return;